// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:flutter/material.dart' show debugPrint;
import 'package:app_kit/models/core/co_state.dart';
import 'package:app_kit/models/core/common_ver.dart';
import 'package:app_kit/models/core/form_model.dart';
import 'package:app_kit/models/core/from_template.dart';
import 'package:app_kit/models/core/key_vars.dart';
import 'package:app_kit/models/core/oss_obj.dart';
import 'package:app_kit/models/core/oss_token.dart';
import 'package:app_kit/models/core/profile_entity.dart';
import 'package:app_kit/models/core/sd_search.dart';
import 'package:app_kit/models/core/sd_sort_item.dart';

JsonConvert jsonConvert = JsonConvert();

typedef JsonConvertFunction<T> = T Function(Map<String, dynamic> json);
typedef EnumConvertFunction<T> = T Function(String value);
typedef ConvertExceptionHandler = void Function(Object error, StackTrace stackTrace);
extension MapSafeExt<K, V> on Map<K, V> {
  T? getOrNull<T>(K? key) {
    if (!containsKey(key) || key == null) {
      return null;
    } else {
      return this[key] as T?;
    }
  }
}

class JsonConvert {
  static ConvertExceptionHandler? onError;
  JsonConvertClassCollection convertFuncMap = JsonConvertClassCollection();

  /// When you are in the development, to generate a new model class, hot-reload doesn't find new generation model class, you can build on MaterialApp method called jsonConvert. ReassembleConvertFuncMap (); This method only works in a development environment
  /// https://flutter.cn/docs/development/tools/hot-reload
  /// class MyApp extends StatelessWidget {
  ///    const MyApp({Key? key})
  ///        : super(key: key);
  ///
  ///    @override
  ///    Widget build(BuildContext context) {
  ///      jsonConvert.reassembleConvertFuncMap();
  ///      return MaterialApp();
  ///    }
  /// }
  void reassembleConvertFuncMap() {
    bool isReleaseMode = const bool.fromEnvironment('dart.vm.product');
    if (!isReleaseMode) {
      convertFuncMap = JsonConvertClassCollection();
    }
  }

  T? convert<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    if (value is T) {
      return value;
    }
    try {
      return _asT<T>(value, enumConvert: enumConvert);
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return null;
    }
  }

  List<T?>? convertList<T>(List<dynamic>? value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return value.map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  List<T>? convertListNotNull<T>(dynamic value, {EnumConvertFunction? enumConvert}) {
    if (value == null) {
      return null;
    }
    try {
      return (value as List<dynamic>).map((dynamic e) => _asT<T>(e, enumConvert: enumConvert)!).toList();
    } catch (e, stackTrace) {
      debugPrint('asT<$T> $e $stackTrace');
      if (onError != null) {
        onError!(e, stackTrace);
      }
      return <T>[];
    }
  }

  T? _asT<T extends Object?>(dynamic value,
      {EnumConvertFunction? enumConvert}) {
    final String type = T.toString();
    final String valueS = value.toString();
    if (enumConvert != null) {
      return enumConvert(valueS) as T;
    } else if (type == "String") {
      return valueS as T;
    } else if (type == "int") {
      final int? intValue = int.tryParse(valueS);
      if (intValue == null) {
        return double.tryParse(valueS)?.toInt() as T?;
      } else {
        return intValue as T;
      }
    } else if (type == "double") {
      return double.parse(valueS) as T;
    } else if (type == "DateTime") {
      return DateTime.parse(valueS) as T;
    } else if (type == "bool") {
      if (valueS == '0' || valueS == '1') {
        return (valueS == '1') as T;
      }
      return (valueS == 'true') as T;
    } else if (type == "Map" || type.startsWith("Map<")) {
      return value as T;
    } else {
      if (convertFuncMap.containsKey(type)) {
        if (value == null) {
          return null;
        }
        var covertFunc = convertFuncMap[type]!;
        if (covertFunc is Map<String, dynamic>) {
          return covertFunc(value as Map<String, dynamic>) as T;
        } else {
          return covertFunc(Map<String, dynamic>.from(value)) as T;
        }
      } else {
        throw UnimplementedError('$type unimplemented,you can try running the app again');
      }
    }
  }

  //list is returned by type
  static M? _getListChildType<M>(List<Map<String, dynamic>> data) {
    if (<CoState>[] is M) {
      return data.map<CoState>((Map<String, dynamic> e) => CoState.fromJson(e)).toList() as M;
    }
    if (<CommonVer>[] is M) {
      return data.map<CommonVer>((Map<String, dynamic> e) => CommonVer.fromJson(e)).toList() as M;
    }
    if (<CommonVerVersion>[] is M) {
      return data.map<CommonVerVersion>((Map<String, dynamic> e) => CommonVerVersion.fromJson(e)).toList() as M;
    }
    if (<ChannelVer>[] is M) {
      return data.map<ChannelVer>((Map<String, dynamic> e) => ChannelVer.fromJson(e)).toList() as M;
    }
    if (<PatrolTotalMo>[] is M) {
      return data.map<PatrolTotalMo>((Map<String, dynamic> e) => PatrolTotalMo.fromJson(e)).toList() as M;
    }
    if (<PatrolTotalSon>[] is M) {
      return data.map<PatrolTotalSon>((Map<String, dynamic> e) => PatrolTotalSon.fromJson(e)).toList() as M;
    }
    if (<FormModel>[] is M) {
      return data.map<FormModel>((Map<String, dynamic> e) => FormModel.fromJson(e)).toList() as M;
    }
    if (<FromTemplate>[] is M) {
      return data.map<FromTemplate>((Map<String, dynamic> e) => FromTemplate.fromJson(e)).toList() as M;
    }
    if (<FromTemplateList>[] is M) {
      return data.map<FromTemplateList>((Map<String, dynamic> e) => FromTemplateList.fromJson(e)).toList() as M;
    }
    if (<TemplateInfo>[] is M) {
      return data.map<TemplateInfo>((Map<String, dynamic> e) => TemplateInfo.fromJson(e)).toList() as M;
    }
    if (<KeyVars>[] is M) {
      return data.map<KeyVars>((Map<String, dynamic> e) => KeyVars.fromJson(e)).toList() as M;
    }
    if (<OssObj>[] is M) {
      return data.map<OssObj>((Map<String, dynamic> e) => OssObj.fromJson(e)).toList() as M;
    }
    if (<OssToken>[] is M) {
      return data.map<OssToken>((Map<String, dynamic> e) => OssToken.fromJson(e)).toList() as M;
    }
    if (<ProfileEntity>[] is M) {
      return data.map<ProfileEntity>((Map<String, dynamic> e) => ProfileEntity.fromJson(e)).toList() as M;
    }
    if (<ProfileInfo>[] is M) {
      return data.map<ProfileInfo>((Map<String, dynamic> e) => ProfileInfo.fromJson(e)).toList() as M;
    }
    if (<ProfileInfoUser>[] is M) {
      return data.map<ProfileInfoUser>((Map<String, dynamic> e) => ProfileInfoUser.fromJson(e)).toList() as M;
    }
    if (<ProfileInfoProject>[] is M) {
      return data.map<ProfileInfoProject>((Map<String, dynamic> e) => ProfileInfoProject.fromJson(e)).toList() as M;
    }
    if (<ProfileSite>[] is M) {
      return data.map<ProfileSite>((Map<String, dynamic> e) => ProfileSite.fromJson(e)).toList() as M;
    }
    if (<SdSearch>[] is M) {
      return data.map<SdSearch>((Map<String, dynamic> e) => SdSearch.fromJson(e)).toList() as M;
    }
    if (<SdSortItem>[] is M) {
      return data.map<SdSortItem>((Map<String, dynamic> e) => SdSortItem.fromJson(e)).toList() as M;
    }

    debugPrint("$M not found");

    return null;
  }

  static M? fromJsonAsT<M>(dynamic json) {
    if (json is M) {
      return json;
    }
    if (json is List) {
      return _getListChildType<M>(json.map((dynamic e) => e as Map<String, dynamic>).toList());
    } else {
      return jsonConvert.convert<M>(json);
    }
  }
}

class JsonConvertClassCollection {
  Map<String, JsonConvertFunction> convertFuncMap = {
    (CoState).toString(): CoState.fromJson,
    (CommonVer).toString(): CommonVer.fromJson,
    (CommonVerVersion).toString(): CommonVerVersion.fromJson,
    (ChannelVer).toString(): ChannelVer.fromJson,
    (PatrolTotalMo).toString(): PatrolTotalMo.fromJson,
    (PatrolTotalSon).toString(): PatrolTotalSon.fromJson,
    (FormModel).toString(): FormModel.fromJson,
    (FromTemplate).toString(): FromTemplate.fromJson,
    (FromTemplateList).toString(): FromTemplateList.fromJson,
    (TemplateInfo).toString(): TemplateInfo.fromJson,
    (KeyVars).toString(): KeyVars.fromJson,
    (OssObj).toString(): OssObj.fromJson,
    (OssToken).toString(): OssToken.fromJson,
    (ProfileEntity).toString(): ProfileEntity.fromJson,
    (ProfileInfo).toString(): ProfileInfo.fromJson,
    (ProfileInfoUser).toString(): ProfileInfoUser.fromJson,
    (ProfileInfoProject).toString(): ProfileInfoProject.fromJson,
    (ProfileSite).toString(): ProfileSite.fromJson,
    (SdSearch).toString(): SdSearch.fromJson,
    (SdSortItem).toString(): SdSortItem.fromJson,
  };

  bool containsKey(String type) {
    return convertFuncMap.containsKey(type);
  }

  JsonConvertFunction? operator [](String key) {
    return convertFuncMap[key];
  }
}